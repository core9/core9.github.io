//defaultTasks 'clean', 'compileApiContracts', 'compileImplContracts', 'test', 'jar', 'apiJavadocs', 'implJavadocs', 'findbugsApi', 'findbugsImpl'
apply plugin: 'java'
apply plugin: "maven"

group = "io.core9"
version = '1.0-SNAPSHOT'

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

/**
 * Source sets
 * impl and api sources
 */
sourceSets {
	api
	impl
}

sourceSets.api.output.resourcesDir = sourceSets.api.output.classesDir
sourceSets.impl.output.resourcesDir = sourceSets.impl.output.classesDir
sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir


sourceSets.all { set ->
	def jarTask = task("${set.name}Jar", type: Jar) {
		baseName = baseName + "-$set.name"
		from set.output
	}
	artifacts { archives jarTask }
}

jar {
	from sourceSets.api.output
	from sourceSets.impl.output
}

configurations {
	coreCompile
	apiCompile.extendsFrom compile
	implCompile.extendsFrom compile
}

compileJava {
	sourceSets.api.compileClasspath += configurations.coreCompile
}

run {
    classpath += configurations.coreCompile
}


/**
 * Documentation
 */

task implJavadocs(type: Javadoc) {
	source = sourceSets.impl.allJava
	classpath = sourceSets.impl.runtimeClasspath
	destinationDir = reporting.file("impl-docs")
}

task apiJavadocs(type: Javadoc) {
	source = sourceSets.api.allJava
	classpath = sourceSets.api.runtimeClasspath
	destinationDir = reporting.file("api-docs")
}

/**
 * Maven and dependency resolving
 */

dependencies {



	coreCompile 'io.core9:core-api:1.0-SNAPSHOT'
	coreCompile 'io.core9:core-jspf:1.0-SNAPSHOT'

	implCompile sourceSets.api.output

	testCompile 'junit:junit:4.11'
	testCompile 'io.core9:core-impl:1.0-SNAPSHOT'
	testCompile sourceSets.api.output
	testCompile sourceSets.impl.output

	runtime configurations.apiRuntime
	runtime configurations.implRuntime

}

repositories {
	mavenLocal()
	mavenCentral()


	maven {
		credentials {
			username mavenUser
			password mavenPassword
		}
		url "http://divvers.com/nexus/content/repositories/io.core9"
	}

	maven {
		credentials {
			username mavenUser
			password mavenPassword
		}
		url 'http://divvers.com/nexus/content/repositories/core'
	}


}



install {
	repositories {
		mavenInstaller {
			addFilter("main") { artifact, file -> artifact.name == project.name }
			["api", "impl"].each { type ->
				addFilter(type) { artifact, file -> artifact.name.endsWith("-$type") }

				// We now have to map our configurations to the correct maven scope for each pom
				["compile", "runtime"].each { scope ->
					configuration = configurations[type + scope.capitalize()]
					["main", type].each { pomName ->
						pom(pomName).scopeMappings.addMapping 1, configuration, scope
					}
				}
			}
		}
	}
}


uploadArchives {
	repositories {
		mavenDeployer {

			repository(url: "http://divvers.com/nexus/content/repositories/io.core9") {
				authentication(userName: mavenUser, password: mavenPassword)
			}

			snapshotRepository(url: 'http://divvers.com/nexus/content/repositories/core') {
				authentication(userName: mavenUser, password: mavenPassword)
			}


			addFilter("main") { artifact, file -> artifact.name == project.name }
			["api", "impl"].each { type ->
				addFilter(type) { artifact, file -> artifact.name.endsWith("-$type") }

				// We now have to map our configurations to the correct maven scope for each pom
				["compile", "runtime"].each { scope ->
					configuration = configurations[type + scope.capitalize()]
					["main", type].each { pomName ->
						pom(pomName).scopeMappings.addMapping 1, configuration, scope
					}
				}
			}
		}
	}
}






